let intervalId;

function fetchData() {
    fetch('/path/to/your/api')
        .then(response => response.json())
        .then(data => {
            updateGraph(data);
        })
        .catch(error => console.error('Error fetching data:', error));
}

function startStreamingData() {
    if (!intervalId) {
        intervalId = setInterval(fetchData, 1000); // Fetch data every second
    }
}

function stopStreamingData() {
    if (intervalId) {
        clearInterval(intervalId);
        intervalId = null;
    }
}

document.getElementById('startStreamingButton').addEventListener('click', startStreamingData);
//javascript
const ctx = document.getElementById('myChart').getContext('2d');
const chart = new Chart(ctx, {
    type: 'line',
    data: {
        labels: [], // Timestamps
        datasets: [{
            label: 'Top Ask Price',
            data: [], // Prices
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 1
        }]
    },
    options: {
        scales: {
            x: {
                type: 'time',
                time: {
                    unit: 'second'
                }
            },
            y: {
                beginAtZero: true
            }
        }
    }
});

function updateGraph(data) {
    const timestamp = new Date(data.timestamp); // Assuming `data.timestamp` is in a suitable format
    const price = data.top_ask_price;

    chart.data.labels.push(timestamp);
    chart.data.datasets[0].data.push(price);

    // Keep the graph within a certain number of data points
    if (chart.data.labels.length > 100) {
        chart.data.labels.shift();
        chart.data.datasets[0].data.shift();
    }

    chart.update();
}
//js
let lastTimestamp = null;
let aggregatedData = {};

function updateGraph(data) {
    const timestamp = new Date(data.timestamp);
    const price = data.top_ask_price;

    if (timestamp === lastTimestamp) {
        // Aggregate duplicate data
        if (aggregatedData[timestamp]) {
            aggregatedData[timestamp].push(price);
        } else {
            aggregatedData[timestamp] = [price];
        }
    } else {
        // Process and display aggregated data
        if (lastTimestamp && aggregatedData[lastTimestamp]) {
            const aggregatedPrice = aggregatedData[lastTimestamp].reduce((a, b) => a + b) / aggregatedData[lastTimestamp].length;
            chart.data.labels.push(lastTimestamp);
            chart.data.datasets[0].data.push(aggregatedPrice);
        }

        lastTimestamp = timestamp;
        aggregatedData = {};
        aggregatedData[timestamp] = [price];
    }

    // Keep the graph within a certain number of data points
    if (chart.data.labels.length > 100) {
        chart.data.labels.shift();
        chart.data.datasets[0].data.shift();
    }

    chart.update();
}
